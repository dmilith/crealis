!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ADDINC128	hashlib/hl_sha2mac.h	130;"	d
BACKSLASH	config.h	/^const std::string BACKSLASH = "\\\\";$/;"	v
BG_BLACK	config.h	66;"	d
BRIGHT	config.h	67;"	d
BYTE_ORDER	hashlib/hl_sha2mac.h	103;"	d
CREALIS_VERSION	version.h	/^static const std::string CREALIS_VERSION = "0.0.3.git";$/;"	v
Ccharacter	character.cpp	/^Ccharacter::Ccharacter( Eraces born_race, std::string new_name ) {$/;"	f	class:Ccharacter
Ccharacter	character.cpp	/^Ccharacter::Ccharacter( std::string new_name ) {$/;"	f	class:Ccharacter
Ccharacter	character.h	/^class Ccharacter  {$/;"	c
Ccoordinates	coordinates.cpp	/^Ccoordinates::Ccoordinates( std::string pos, std::string parent_pos[ 6 ] ) {$/;"	f	class:Ccoordinates
Ccoordinates	coordinates.cpp	/^Ccoordinates::Ccoordinates() {$/;"	f	class:Ccoordinates
Ccoordinates	coordinates.h	/^class Ccoordinates {$/;"	c
Ch	hashlib/hl_sha2mac.h	181;"	d
Citem	item.cpp	/^Citem::Citem() {$/;"	f	class:Citem
Citem	item.h	/^class Citem {$/;"	c
Cmap	map.cpp	/^Cmap::Cmap( std::string newName, std::string newFileName ) {$/;"	f	class:Cmap
Cmap	map.cpp	/^Cmap::Cmap() {$/;"	f	class:Cmap
Cmap	map.h	/^class Cmap {$/;"	c
Computed	hashlib/hl_sha1.h	/^	int Computed;$/;"	m	struct:SHA1_CTX
Corrupted	hashlib/hl_sha1.h	/^	int Corrupted;$/;"	m	struct:SHA1_CTX
Cplace	place.cpp	/^Cplace::Cplace( std::string newName ) {$/;"	f	class:Cplace
Cplace	place.cpp	/^Cplace::Cplace() {$/;"	f	class:Cplace
Cplace	place.h	/^class Cplace {$/;"	c
Csoul	soul.cpp	/^Csoul::Csoul() {$/;"	f	class:Csoul
Csoul	soul.h	/^class Csoul {$/;"	c
Ctheritory	theritory.cpp	/^Ctheritory::Ctheritory() {$/;"	f	class:Ctheritory
Ctheritory	theritory.h	/^class Ctheritory {$/;"	c
Cworld	world.cpp	/^Cworld::Cworld( std::string new_name, uint64_t x, uint64_t y, uint64_t g ) { \/\/maxX, maxY, grawitacja$/;"	f	class:Cworld
Cworld	world.cpp	/^Cworld::Cworld() {$/;"	f	class:Cworld
Cworld	world.h	/^class Cworld {$/;"	c
DEFAULT_GRAVITY	world.h	/^const uint32_t DEFAULT_GRAVITY = 0;$/;"	v
DEFAULT_THERITORY_X	world.h	/^const uint32_t DEFAULT_THERITORY_X = 1;$/;"	v
DEFAULT_THERITORY_Y	world.h	/^const uint32_t DEFAULT_THERITORY_Y = 1;$/;"	v
ETypeOfJob	job.h	/^enum ETypeOfJob {$/;"	g
Ealignment	soul.h	/^enum Ealignment {$/;"	g
Eraces	character.h	/^enum Eraces {$/;"	g
Esize	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	g
GREEN	config.h	69;"	d
HASHLIBPP_H	hashlib/hashlibpp.h	39;"	d
HASHWRAPPER_H	hashlib/hl_hashwrapper.h	73;"	d
HLTYPES_H	hashlib/hl_types.h	40;"	d
HL_EXCEPTION_H	hashlib/hl_exception.h	41;"	d
HL_FILE_READ_ERROR	hashlib/hl_exception.h	/^	HL_FILE_READ_ERROR	$/;"	e	enum:hlerrors
HL_NO_ERROR	hashlib/hl_exception.h	/^	HL_NO_ERROR = 0,$/;"	e	enum:hlerrors
Intermediate_Hash	hashlib/hl_sha1.h	/^	hl_uint32 Intermediate_Hash[SHA1HashSize\/4];$/;"	m	struct:SHA1_CTX
JOB_SAVE_PATH	config.h	/^const std::string JOB_SAVE_PATH = "jobs" + pp;$/;"	v
Job	job.cpp	/^Job::Job() {$/;"	f	class:Job
Job	job.h	/^class Job {$/;"	c
K256	hashlib/hl_sha256.cpp	/^const static sha2_word32 K256[64] = {$/;"	v	file:
LITTLE_ENDIAN	hashlib/hl_sha2mac.h	102;"	d
Length_High	hashlib/hl_sha1.h	/^	hl_uint32 Length_High;$/;"	m	struct:SHA1_CTX
Length_Low	hashlib/hl_sha1.h	/^	hl_uint32 Length_Low;            $/;"	m	struct:SHA1_CTX
MAGENTA	config.h	70;"	d
MAIN_DIR	config.h	/^ const std::string MAIN_DIR = std::string( "C:" + pp + "CWorld" );$/;"	v
MAIN_DIR	config.h	/^ const std::string MAIN_DIR = std::string( getenv( "HOME" ) ) + pp + ".cWorld";$/;"	v
MAX_DWARF_AGE	character.h	/^const uint32_t MAX_DWARF_AGE = 350;$/;"	v
MAX_ELVE_AGE	character.h	/^const uint32_t MAX_ELVE_AGE = 2000;$/;"	v
MAX_HUMAN_AGE	character.h	/^const uint32_t MAX_HUMAN_AGE = 115;$/;"	v
MAX_PLAYERS	world.h	/^const uint32_t MAX_PLAYERS = 2000;$/;"	v
MAX_WORLDS	world.h	/^const uint32_t MAX_WORLDS = 50;$/;"	v
MEMCPY_BCOPY	hashlib/hl_sha2mac.h	157;"	d
MEMCPY_BCOPY	hashlib/hl_sha2mac.h	161;"	d
MEMSET_BZERO	hashlib/hl_sha2mac.h	156;"	d
MEMSET_BZERO	hashlib/hl_sha2mac.h	160;"	d
Maj	hashlib/hl_sha2mac.h	182;"	d
Message_Block	hashlib/hl_sha1.h	/^	hl_uint8 Message_Block[64];      $/;"	m	struct:SHA1_CTX
Message_Block_Index	hashlib/hl_sha1.h	/^	hl_uint16 Message_Block_Index;$/;"	m	struct:SHA1_CTX
MyContainer	tests/serialization_test.cpp	/^class MyContainer {$/;"	c	file:
R	hashlib/hl_sha2mac.h	174;"	d
RED	config.h	68;"	d
REVERSE32	hashlib/hl_sha2mac.h	110;"	d
REVERSE64	hashlib/hl_sha2mac.h	115;"	d
ROUND256	hashlib/hl_sha256.cpp	171;"	d	file:
ROUND256_0_TO_15	hashlib/hl_sha256.cpp	151;"	d	file:
ROUND256_0_TO_15	hashlib/hl_sha256.cpp	162;"	d	file:
RUBY_LOCAL_INSTALL	config.h	16;"	d
S32	hashlib/hl_sha2mac.h	176;"	d
S64	hashlib/hl_sha2mac.h	178;"	d
SHA1	hashlib/hl_sha1.h	/^class SHA1$/;"	c
SHA1CircularShift	hashlib/hl_sha1.cpp	81;"	d	file:
SHA1HashSize	hashlib/hl_sha1.h	95;"	d
SHA1Input	hashlib/hl_sha1.cpp	/^int SHA1::SHA1Input(    SHA1_CTX    *context,$/;"	f	class:SHA1
SHA1PadMessage	hashlib/hl_sha1.cpp	/^void SHA1::SHA1PadMessage(SHA1_CTX *context)$/;"	f	class:SHA1
SHA1ProcessMessageBlock	hashlib/hl_sha1.cpp	/^void SHA1::SHA1ProcessMessageBlock(SHA1_CTX *context)$/;"	f	class:SHA1
SHA1Reset	hashlib/hl_sha1.cpp	/^int SHA1::SHA1Reset(SHA1_CTX *context)$/;"	f	class:SHA1
SHA1Result	hashlib/hl_sha1.cpp	/^int SHA1::SHA1Result( SHA1_CTX *context,$/;"	f	class:SHA1
SHA1WRAPPER_H	hashlib/hl_sha1wrapper.h	41;"	d
SHA1_CTX	hashlib/hl_sha1.h	/^typedef struct SHA1_CTX$/;"	s
SHA1_CTX	hashlib/hl_sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:SHA1_CTX
SHA1_H	hashlib/hl_sha1.h	73;"	d
SHA256	hashlib/hl_sha256.h	/^class SHA256$/;"	c
SHA256WRAPPER_H	hashlib/hl_sha256wrapper.h	41;"	d
SHA256_BLOCK_LENGTH	hashlib/hl_sha256.h	78;"	d
SHA256_CTX	hashlib/hl_sha256.h	/^typedef struct SHA256_CTX $/;"	s
SHA256_CTX	hashlib/hl_sha256.h	/^} SHA256_CTX;$/;"	t	typeref:struct:SHA256_CTX
SHA256_DIGEST_LENGTH	hashlib/hl_sha256.h	80;"	d
SHA256_DIGEST_STRING_LENGTH	hashlib/hl_sha256.h	81;"	d
SHA256_End	hashlib/hl_sha256.cpp	/^char* SHA256::SHA256_End(SHA256_CTX* context, char buffer[]) {$/;"	f	class:SHA256
SHA256_Final	hashlib/hl_sha256.cpp	/^void SHA256::SHA256_Final(sha2_byte digest[], SHA256_CTX* context) {$/;"	f	class:SHA256
SHA256_H	hashlib/hl_sha256.h	74;"	d
SHA256_Init	hashlib/hl_sha256.cpp	/^void SHA256::SHA256_Init(SHA256_CTX* context) {$/;"	f	class:SHA256
SHA256_SHORT_BLOCK_LENGTH	hashlib/hl_sha256.h	79;"	d
SHA256_Transform	hashlib/hl_sha256.cpp	/^void SHA256::SHA256_Transform(SHA256_CTX* context, const sha2_word32* data) {$/;"	f	class:SHA256
SHA256_Update	hashlib/hl_sha256.cpp	/^void SHA256::SHA256_Update(SHA256_CTX* context, const sha2_byte *data, unsigned int len) {$/;"	f	class:SHA256
SHA2_USE_MEMSET_MEMCPY	hashlib/hl_sha2mac.h	148;"	d
SHA2ext	hashlib/hl_sha2ext.h	/^class SHA2ext$/;"	c
SHA2ext_H	hashlib/hl_sha2ext.h	74;"	d
SHA384_BLOCK_LENGTH	hashlib/hl_sha2ext.h	78;"	d
SHA384_CTX	hashlib/hl_sha2ext.h	/^typedef SHA512_CTX SHA384_CTX;$/;"	t
SHA384_DIGEST_LENGTH	hashlib/hl_sha2ext.h	79;"	d
SHA384_DIGEST_STRING_LENGTH	hashlib/hl_sha2ext.h	80;"	d
SHA512_BLOCK_LENGTH	hashlib/hl_sha2ext.h	81;"	d
SHA512_CTX	hashlib/hl_sha2ext.h	/^typedef struct SHA512_CTX $/;"	s
SHA512_CTX	hashlib/hl_sha2ext.h	/^} SHA512_CTX;$/;"	t	typeref:struct:SHA512_CTX
SHA512_DIGEST_LENGTH	hashlib/hl_sha2ext.h	82;"	d
SHA512_DIGEST_STRING_LENGTH	hashlib/hl_sha2ext.h	83;"	d
SHA512_SHORT_BLOCK_LENGTH	hashlib/hl_sha2ext.h	84;"	d
SLASH	config.h	/^const std::string SLASH = "\/";$/;"	v
SYSTEM_CLASS_VERSION	version.h	/^static const std::string SYSTEM_CLASS_VERSION = "0.2.6.git";$/;"	v
Sigma0_256	hashlib/hl_sha2mac.h	185;"	d
Sigma0_512	hashlib/hl_sha2mac.h	191;"	d
Sigma1_256	hashlib/hl_sha2mac.h	186;"	d
Sigma1_512	hashlib/hl_sha2mac.h	192;"	d
WORLD_SAVE_PATH	config.h	/^const std::string WORLD_SAVE_PATH = "save" + pp;$/;"	v
_CCHARACTER_H_	character.h	11;"	d
_CCONFIG_H_	config.h	11;"	d
_CCOORDINATES_H_	coordinates.h	11;"	d
_CITEM_H_	item.h	11;"	d
_CJOB_H_	job.h	11;"	d
_CMAP_H_	map.h	11;"	d
_CPLACE_H_	place.h	11;"	d
_CSOUL_H_	soul.h	11;"	d
_CTHERITORY_H_	theritory.h	11;"	d
_CWORLD_H_	world.h	12;"	d
_HL_TOOLS_H	hashlib/hl_tools.h	10;"	d
_MAIN_H	main.h	2;"	d
_SHA_enum_	hashlib/hl_sha1.h	83;"	d
_VERSION_H_	version.h	2;"	d
_do	main.cpp	/^_do( ETypeOfJob action_to_perform, Ccharacter *c1, Ccharacter *c2 = NULL ) {$/;"	f
action_ATTACK	job.h	/^			action_ATTACK = 10,$/;"	e	enum:ETypeOfJob
action_DEFEND	job.h	/^			action_DEFEND = 11,$/;"	e	enum:ETypeOfJob
action_IDLE	job.h	/^			action_IDLE = 0,$/;"	e	enum:ETypeOfJob
action_RUN	job.h	/^			action_RUN = 2,$/;"	e	enum:ETypeOfJob
action_WALK	job.h	/^			action_WALK = 1,$/;"	e	enum:ETypeOfJob
actors	job.h	/^				Ccharacter* actors[ 2 ]; \/\/ first is always main player, second one is optional$/;"	m	class:Job
add_job_to_stack	main.cpp	/^add_job_to_stack( Job job ) { $/;"	f
age	character.h	/^	uint32_t age; \/\/ wiek postaci$/;"	m	class:Ccharacter
age	tests/serialization_test.cpp	/^      uint32_t age; \/\/ wiek postaci$/;"	m	class:MyContainer	file:
alignment	soul.h	/^	Ealignment alignment; \/\/charakter$/;"	m	class:Csoul
annimal	character.h	/^	    annimal = 0,$/;"	e	enum:Eraces
base_health	character.h	/^			base_health,$/;"	m	class:Ccharacter
base_health	tests/serialization_test.cpp	/^			base_health,$/;"	m	class:MyContainer	file:
bitcount	hashlib/hl_sha256.h	/^	hl_uint64		bitcount;$/;"	m	struct:SHA256_CTX
bitcount	hashlib/hl_sha2ext.h	/^	hl_uint64       bitcount[2];$/;"	m	struct:SHA512_CTX
boost	main.h	/^namespace boost {$/;"	n
boost	tests/serialization_test_2.cpp	/^namespace boost {$/;"	n	file:
buffer	hashlib/hl_sha256.h	/^	hl_uint8		buffer[SHA256_BLOCK_LENGTH];$/;"	m	struct:SHA256_CTX
buffer	hashlib/hl_sha2ext.h	/^	hl_uint8        buffer[SHA512_BLOCK_LENGTH];$/;"	m	struct:SHA512_CTX
cave_troll	character.h	/^			cave_troll = 25$/;"	e	enum:Eraces
chaoticEvil	soul.h	/^		chaoticEvil = -3,$/;"	e	enum:Ealignment
characters	main.cpp	/^static Ccharacter* characters[ MAX_PLAYERS ]; \/\/ world.h$/;"	v	file:
characters_online	main.cpp	/^static uint64_t characters_online; \/\/ current amount of online players$/;"	v	file:
cl_version	world.h	/^	std::string cl_version; \/\/wersja swiata. od tego zaleza ew niekompatybilnosci$/;"	m	class:Cworld
context	hashlib/hl_sha1wrapper.h	/^			SHA1_CTX context;$/;"	m	class:sha1wrapper
context	hashlib/hl_sha256wrapper.h	/^			SHA256_CTX context;$/;"	m	class:sha256wrapper
convToString	hashlib/hl_sha1wrapper.cpp	/^std::string sha1wrapper::convToString(unsigned char *data)$/;"	f	class:sha1wrapper
convToString	hashlib/hl_sha256wrapper.cpp	/^std::string sha256wrapper::convToString(unsigned char *data)$/;"	f	class:sha256wrapper
dead	character.h	/^	bool dead;$/;"	m	class:Ccharacter
demoan	soul.h	/^		demoan = 4 \/\/demoan, polaczenie demona i aniola -cos jak chaoticNeutral$/;"	e	enum:Ealignment
dexterity	character.h	/^			dexterity,$/;"	m	class:Ccharacter
dexterity	tests/serialization_test.cpp	/^			dexterity,$/;"	m	class:MyContainer	file:
dwarf	character.h	/^			dwarf = 3,$/;"	e	enum:Eraces
elve	character.h	/^	    elve = 1,$/;"	e	enum:Eraces
erro_message	hashlib/hl_exception.h	/^			std::string erro_message(void)$/;"	f	class:hlException
error_number	hashlib/hl_exception.h	/^			hlerror error_number(void)$/;"	f	class:hlException
evil	soul.h	/^		evil = -2,$/;"	e	enum:Ealignment
fileName	map.h	/^	std::string fileName; \/\/ nazwa pliku bsp z mapa$/;"	m	class:Cmap
generate_sha1	hashlib/hl_tools.cpp	/^generate_sha1( bool timeize_srand ) {$/;"	f
getHashFromFile	hashlib/hl_hashwrapper.h	/^		virtual std::string getHashFromFile(std::string filename)$/;"	f	class:hashwrapper
getHashFromString	hashlib/hl_hashwrapper.h	/^		virtual std::string getHashFromString(std::string text)$/;"	f	class:hashwrapper
get_job_from_stack	main.cpp	/^get_job_from_stack() {$/;"	f
gold	character.h	/^	uint64_t gold;		$/;"	m	class:Ccharacter
gold	tests/serialization_test.cpp	/^      int64_t gold;$/;"	m	class:MyContainer	file:
good	soul.h	/^		good = 2,$/;"	e	enum:Ealignment
gravity	world.h	/^	uint64_t gravity; \/\/grawitacja$/;"	m	class:Cworld
grizzly	character.h	/^	    grizzly = 4,$/;"	e	enum:Eraces
hashIt	hashlib/hl_sha1wrapper.cpp	/^std::string sha1wrapper::hashIt(void)$/;"	f	class:sha1wrapper
hashIt	hashlib/hl_sha256wrapper.cpp	/^std::string sha256wrapper::hashIt(void)$/;"	f	class:sha256wrapper
hashwrapper	hashlib/hl_hashwrapper.h	/^class hashwrapper$/;"	c
health	character.h	/^		  health,$/;"	m	class:Ccharacter
health	tests/serialization_test.cpp	/^		  health,$/;"	m	class:MyContainer	file:
hlException	hashlib/hl_exception.h	/^			hlException(hlerror er, std::string m)$/;"	f	class:hlException
hlException	hashlib/hl_exception.h	/^class hlException$/;"	c
hl_uint16	hashlib/hl_types.h	/^typedef unsigned short int 	hl_uint16;$/;"	t
hl_uint32	hashlib/hl_types.h	/^typedef unsigned long int 	hl_uint32;$/;"	t
hl_uint64	hashlib/hl_types.h	/^typedef unsigned long long int	hl_uint64;$/;"	t
hl_uint8	hashlib/hl_types.h	/^typedef unsigned char 		hl_uint8;$/;"	t
hlerror	hashlib/hl_exception.h	/^} hlerror;$/;"	t	typeref:enum:hlerrors
hlerrors	hashlib/hl_exception.h	/^typedef enum hlerrors$/;"	g
huge	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
human	character.h	/^	    human = 2,$/;"	e	enum:Eraces
iError	hashlib/hl_exception.h	/^			hlerror iError;$/;"	m	class:hlException
init_structures	main.cpp	/^init_structures() {$/;"	f
instinct	character.h	/^			instinct, \/\/ instynkt im wyzszy tym postac bardziej potrafi wyczuc jakie ma szanse z przeciwnikiem :}$/;"	m	class:Ccharacter
instinct	tests/serialization_test.cpp	/^			instinct, \/\/ instynkt im wyzszy tym postac bardziej potrafi wyczuc jakie ma szanse z przeciwnikiem :}$/;"	m	class:MyContainer	file:
intelligence	character.h	/^			intelligence,$/;"	m	class:Ccharacter
intelligence	tests/serialization_test.cpp	/^			intelligence,$/;"	m	class:MyContainer	file:
items	character.h	/^	Citem* items[50];$/;"	m	class:Ccharacter
job_crc	job.h	/^			 	std::string job_id, job_crc; \/\/ sha1? -not yet implemented$/;"	m	class:Job
job_flags	job.h	/^				uint32_t job_flags; \/\/ specified flags for non-standard types of jobs -not yet implemented$/;"	m	class:Job
job_id	job.h	/^			 	std::string job_id, job_crc; \/\/ sha1? -not yet implemented$/;"	m	class:Job
job_list	main.cpp	/^static std::vector<Job> job_list;$/;"	v	file:
kill	character.cpp	/^void Ccharacter::kill() {$/;"	f	class:Ccharacter
large	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
lawfulGood	soul.h	/^		lawfulGood = 3,$/;"	e	enum:Ealignment
load	tests/serialization_test.cpp	/^    load(Archive & ar, const unsigned int version)$/;"	f	class:MyContainer	file:
load_job	main.cpp	/^load_job( Job job, std::string filename ) {$/;"	f
load_world	main.cpp	/^load_world( Cworld world, std::string filename ) {$/;"	f
load_world	main2.cpp	/^load_world( Cworld world, std::string filename ) {$/;"	f
luck	character.h	/^	int32_t luck; \/\/szczescie moze byc -$/;"	m	class:Ccharacter
luck	tests/serialization_test.cpp	/^      int32_t luck; \/\/szczescie moze byc -$/;"	m	class:MyContainer	file:
main	main.cpp	/^main( int argc, char* argv[] ) {$/;"	f
main	main2.cpp	/^main() {$/;"	f
main	tests/serialization_test.cpp	/^int main() {$/;"	f
main	tests/serialization_test_2.cpp	/^int main() {$/;"	f
mana	soul.h	/^	uint64_t mana,$/;"	m	class:Csoul
map	place.h	/^	Cmap map; \/\/mapa$/;"	m	class:Cplace
medium	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
mind_strength	character.h	/^			mind_strength;\/\/cechy postaci$/;"	m	class:Ccharacter
mind_strength	soul.h	/^			mind_strength; \/\/sila umyslu$/;"	m	class:Csoul
mind_strength	tests/serialization_test.cpp	/^			mind_strength;\/\/cechy postaci$/;"	m	class:MyContainer	file:
name	character.h	/^	std::string name;	\/\/imie\/nazwa postaci$/;"	m	class:Ccharacter
name	map.h	/^	std::string name;	\/\/map name		$/;"	m	class:Cmap
name	place.h	/^	std::string name; \/\/place name$/;"	m	class:Cplace
name	theritory.h	/^	std::string name; \/\/theritory name and\/or sha1 identifier$/;"	m	class:Ctheritory
name	world.h	/^	std::string name;$/;"	m	class:Cworld
neutral	soul.h	/^		neutral = 0,$/;"	e	enum:Ealignment
neutralEvil	soul.h	/^		neutralEvil = -1,$/;"	e	enum:Ealignment
neutralGood	soul.h	/^		neutralGood = 1,$/;"	e	enum:Ealignment
outgenerous	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
parent_positions	coordinates.h	/^	std::string parent_positions[ 6 ]; \/\/ sha1 z sha sąsiadujących elementów liczone od lewego boku 6 kąta$/;"	m	class:Ccoordinates
place	theritory.h	/^	Cplace place; \/\/terytorium place'a$/;"	m	class:Ctheritory
pos	character.h	/^	Ccoordinates pos; \/\/pozycja postaci w swiecie$/;"	m	class:Ccharacter
position	coordinates.h	/^	std::string position; \/\/ sha1 identyfikujące daną pozycję mapy$/;"	m	class:Ccoordinates
pp	config.h	/^static std::string pp = SLASH; \/\/ "normal" UNIX slash to separate parts path$/;"	v
print_character	main.cpp	/^print_character( Ccharacter* ch ) {$/;"	f
private_box	character.h	/^	Citem* private_box[250];$/;"	m	class:Ccharacter
race	character.h	/^	Eraces race;$/;"	m	class:Ccharacter
recv_signal	main.cpp	/^recv_signal( int sig ) {$/;"	f
resetContext	hashlib/hl_sha1wrapper.cpp	/^void sha1wrapper::resetContext(void)$/;"	f	class:sha1wrapper
resetContext	hashlib/hl_sha256wrapper.cpp	/^void sha256wrapper::resetContext(void)$/;"	f	class:sha256wrapper
run	job.cpp	/^void Job::run() {$/;"	f	class:Job
save	tests/serialization_test.cpp	/^    save( Archive & ar, const unsigned int version ) const {$/;"	f	class:MyContainer	file:
save_job	main.cpp	/^save_job( Job job, std::string filename ) {$/;"	f
save_world	main.cpp	/^save_world( Cworld world, std::string filename ) {$/;"	f
save_world	main2.cpp	/^save_world( Cworld world, std::string filename ) {$/;"	f
serialization	main.h	/^namespace serialization {$/;"	n	namespace:boost
serialization	tests/serialization_test_2.cpp	/^namespace serialization {$/;"	n	namespace:boost	file:
serialize	main.h	/^				void serialize(Archive & ar, Citem & item, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	main.h	/^        void serialize(Archive & ar, Ccharacter & ch, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	main.h	/^        void serialize(Archive & ar, Ccoordinates & pos, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	main.h	/^        void serialize(Archive & ar, Csoul & soul, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	main.h	/^        void serialize(Archive & ar, Cworld & world, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	main.h	/^        void serialize(Archive & ar, Job & job, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	tests/serialization_test_2.cpp	/^        void serialize(Archive & ar, Ccharacter & ch, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	tests/serialization_test_2.cpp	/^        void serialize(Archive & ar, Ccoordinates & pos, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	tests/serialization_test_2.cpp	/^        void serialize(Archive & ar, Citem & item, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	tests/serialization_test_2.cpp	/^        void serialize(Archive & ar, Csoul & soul, const unsigned int version) {$/;"	f	namespace:boost::serialization
serialize	tests/serialization_test_2.cpp	/^        void serialize(Archive & ar, Cworld & world, const unsigned int version) {$/;"	f	namespace:boost::serialization
sha1	hashlib/hl_sha1wrapper.h	/^			SHA1 *sha1;$/;"	m	class:sha1wrapper
sha1wrapper	hashlib/hl_sha1wrapper.cpp	/^sha1wrapper::sha1wrapper()$/;"	f	class:sha1wrapper
sha1wrapper	hashlib/hl_sha1wrapper.h	/^class sha1wrapper : public hashwrapper$/;"	c
sha256	hashlib/hl_sha256wrapper.h	/^			SHA256 *sha256;$/;"	m	class:sha256wrapper
sha256_initial_hash_value	hashlib/hl_sha256.cpp	/^const static sha2_word32 sha256_initial_hash_value[8] = {$/;"	v	file:
sha256wrapper	hashlib/hl_sha256wrapper.cpp	/^sha256wrapper::sha256wrapper()$/;"	f	class:sha256wrapper
sha256wrapper	hashlib/hl_sha256wrapper.h	/^class sha256wrapper : public hashwrapper$/;"	c
sha2_byte	hashlib/hl_sha256.h	/^typedef hl_uint8  sha2_byte;	$/;"	t
sha2_byte	hashlib/hl_sha2ext.h	/^typedef hl_uint8  sha2_byte;	$/;"	t
sha2_hex_digits	hashlib/hl_sha256.cpp	/^static const char *sha2_hex_digits = "0123456789abcdef";$/;"	v	file:
sha2_word32	hashlib/hl_sha256.h	/^typedef hl_uint32 sha2_word32;	$/;"	t
sha2_word32	hashlib/hl_sha2ext.h	/^typedef hl_uint32 sha2_word32;	$/;"	t
sha2_word64	hashlib/hl_sha256.h	/^typedef hl_uint64 sha2_word64;	$/;"	t
sha2_word64	hashlib/hl_sha2ext.h	/^typedef hl_uint64 sha2_word64;	$/;"	t
shaInputTooLong	hashlib/hl_sha1.h	/^    shaInputTooLong,    \/* input data too long *\/$/;"	e	enum:__anon1
shaNull	hashlib/hl_sha1.h	/^    shaNull,            \/* Null pointer parameter *\/$/;"	e	enum:__anon1
shaStateError	hashlib/hl_sha1.h	/^    shaStateError       \/* called Input after Result *\/$/;"	e	enum:__anon1
shaSuccess	hashlib/hl_sha1.h	/^    shaSuccess = 0,$/;"	e	enum:__anon1
sigma0_256	hashlib/hl_sha2mac.h	187;"	d
sigma0_512	hashlib/hl_sha2mac.h	193;"	d
sigma1_256	hashlib/hl_sha2mac.h	188;"	d
sigma1_512	hashlib/hl_sha2mac.h	194;"	d
size_of_item	item.h	/^	Esize size_of_item;$/;"	m	class:Citem
small	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
soul	character.h	/^	Csoul soul; \/\/ aktualna dusza :}$/;"	m	class:Ccharacter
soul_exist	soul.h	/^	bool soul_exist; \/\/czy istnieje dusza. czyli czy postac jest graczem czy nie$/;"	m	class:Csoul
state	hashlib/hl_sha256.h	/^	hl_uint32		state[8];$/;"	m	struct:SHA256_CTX
state	hashlib/hl_sha2ext.h	/^	hl_uint64       state[8];$/;"	m	struct:SHA512_CTX
strMessge	hashlib/hl_exception.h	/^			std::string strMessge;$/;"	m	class:hlException
strength	character.h	/^			strength,$/;"	m	class:Ccharacter
strength	tests/serialization_test.cpp	/^			strength,$/;"	m	class:MyContainer	file:
thread_console	main.cpp	/^thread_console() {$/;"	f
thread_main_loop	main.cpp	/^void thread_main_loop() {$/;"	f
thread_timer	main.cpp	/^thread_timer() {$/;"	f
timer	main.cpp	/^static uint64_t timer;$/;"	v	file:
tiny	item.h	/^enum Esize { tiny = 0, small, medium, large, outgenerous, huge };$/;"	e	enum:Esize
type	job.h	/^				ETypeOfJob type;$/;"	m	class:Job
uint2cstr	hashlib/hl_tools.cpp	/^uint2cstr( uint64_t i ) {$/;"	f
updateContext	hashlib/hl_sha1wrapper.cpp	/^void sha1wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha1wrapper
updateContext	hashlib/hl_sha256wrapper.cpp	/^void sha256wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha256wrapper
weight	item.h	/^	int64_t weight;$/;"	m	class:Citem
worlds	main.cpp	/^static Cworld* worlds[ MAX_WORLDS ]; \/\/ world.h$/;"	v	file:
worlds_online	main.cpp	/^static uint64_t worlds_online;$/;"	v	file:
x_theritory_size	world.h	/^	uint64_t x_theritory_size, y_theritory_size; \/\/rozmiary obszaru zdefiniowanego na serwerze (w theritoriach\/place'ach))$/;"	m	class:Cworld
y_theritory_size	world.h	/^	uint64_t x_theritory_size, y_theritory_size; \/\/rozmiary obszaru zdefiniowanego na serwerze (w theritoriach\/place'ach))$/;"	m	class:Cworld
~Ccharacter	character.cpp	/^Ccharacter::~Ccharacter() {$/;"	f	class:Ccharacter
~Job	job.cpp	/^Job::~Job() {$/;"	f	class:Job
~hashwrapper	hashlib/hl_hashwrapper.h	/^		virtual ~hashwrapper ( void ) { };$/;"	f	class:hashwrapper
~sha1wrapper	hashlib/hl_sha1wrapper.cpp	/^sha1wrapper::~sha1wrapper()$/;"	f	class:sha1wrapper
~sha256wrapper	hashlib/hl_sha256wrapper.cpp	/^sha256wrapper::~sha256wrapper()$/;"	f	class:sha256wrapper
